[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducción a la Programación II",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#sec-licensing",
    "href": "index.html#sec-licensing",
    "title": "Introducción a la Programación II",
    "section": "Reutilización y licencia",
    "text": "Reutilización y licencia\nTodo el material puede reutilizarse libremente bajo los términos de la licencia Creative Commons Reconocimiento 4.0 Internacional Licencia, esto significa que el material puede utilizarse, reutilizarse y modificarse, siempre que se cite esta fuente.\nEl código fuente del libro se encuentra en el repositorio de GitHub intro-programacion. Cualquier corrección, o contribuciones son bienvenidas. Visitá nuestra página sobre como contribuir](https://github.com/merely-useful/r-rse/blob/main/.github/CONTRIBUTING.md) para conocer más.\nEjemplos de cajitas\n\nEste es un ejercicio\n\n\nEste es un ejemplo\n\n\nA tener en cuenta!\n\n\nEste es un consejo",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "00_intro.html",
    "href": "00_intro.html",
    "title": "\n1  Presentación\n",
    "section": "",
    "text": "1.1 Te presentamos R y RStudio",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Presentación</span>"
    ]
  },
  {
    "objectID": "00_intro.html#te-presentamos-r-y-rstudio",
    "href": "00_intro.html#te-presentamos-r-y-rstudio",
    "title": "\n1  Presentación\n",
    "section": "",
    "text": "1.1.1 Orientándose en RStudio\nEn principio se podría escribir código de R con el Bloc de Notas y luego ejecutarlo, pero nosotros vamos a usar RStudio, que brinda una interfaz gráfica con un montón de herramientas extra para hacernos la vida más fácil.\nCuando abras RStudio te vas a encontrar con una ventana con cuatro paneles como esta:\n\n\nVentana de RStudio\n\nLos dos paneles de la izquierda son las dos formas principales de interactuar con R. El panel de abajo a la izquierda es la consola. Es el lugar que te permite conversar con R. Podés escribir comandos que se van a ejecutar inmediátamente cuando aprietes Enter y cuyo resultado se va a mostrar en la consola.\nPor ejemplo, hacé click en la consola, escribí 2 + 2 y apretá Enter. Vas a ver algo como esto:\n\n2 + 2\n\n[1] 4\n\n\nLe dijiste a R que sume 2 y 2 y R te devolvió el resultado: 4 (no te preocupes del [1] por ahora). Eso está bueno si querés hacer una cuenta rápida o chequear algo pequeño, pero no sirve para hacer un análisis complejo y reproducible.\nEn el panel de arriba a la izquierda tenemos esencialmente un editor de texto. Ahí es donde vas a escribir si querés guardar instrucciones para ejecutarlas en otro momento y donde vas a estar el 87% de tu tiempo usando R.\nA la derecha hay paneles más bien informativos y que tienen varias solapas que vamos a ir descubriendo a su tiempo. Para destacar, arriba a la derecha está el “environment”, que es forma de ver qué es lo que está “pensando” R en este momento. Ahí vas a poder ver un listado de los datos que están abiertos y otros objetos que están cargados en la memoria de R. Ahora está vacío porque todavía no cargaste ni creaste ningún dato. Abajo a la derecha tienen un explorador de archivos y también el panel de ayuda, que es donde vas a pasar el otro 13% del tiempo usando R.\nEntonces, para resumir:\n\n\nLa cocina de RStudio\n\n\n1.1.2 Hablando con R\nYa viste cómo usar R como una calculadora.\n\n2 + 2\n\n[1] 4\n\n\nR entiende un montón de operaciones aritméticas escritas como seguramente ya te imaginás:\n\n\n+: sumar\n\n-: restar\n\n*: multiplicar\n\n/: dividir\n\n^ o **: exponenciar\n\nPero además conoce muchas otras operaciones. Para decirle a R que calcule el seno de 1 hay que escribir esto:\n\nsin(1)\n\n[1] 0.841471\n\n\nLa sintaxis básica para aplicar cualquier función es nombre_funcion(argumentos).\n\nEn la consola escribí el código de R para calcular las siguientes operaciones:\n\n2 multiplicado por 2\n3 al cuadrado\ndos tercios\n5 por 8 más 1\n\n\nAl hacer todas estas operaciones, lo único que hiciste fue decirle a R que haga esos cálculos. R te devuelve el resultado, pero no lo guarda en ningún lado. Para decirle que guarde el resultado de una operación hay que decirle con qué “nombre” querés guardarlo. El siguiente código hace eso:\n\nx &lt;- 2 + 2\n\nLa “flechita” &lt;- es el operador de asignación, que le dice a R que tome el resultado de la derecha y lo guarde en una variable con el nombre que está a la izquierda. Vas a ver que no te devele el resultado. Para verlo, ejecutamos\n\nx\n\n[1] 4\n\n\nEsto le dice a R que te “imprima” el contenido de la variable x.\n\n¿Qué te imaginás que va a pasar cuando ahora corra el siguiente código?\n\nx + 2\n\n\nPonerle nombre a las variables es a veces la parte más difícil de escribir código. A R le viene bien cualquier nombre de variable siempre y cuando no empiece con un número o un “_”. Pero a los seres humanos que lean el código y tengan que interpretarlos les va a resultas más fácil entender qué hace la variable promedio_temperatura que la variable xxy1.\nEl consejo es tratar en lo posible usar nombre descriptivos y consistentes. Por ejemplo, siempre usar minúsculas y separar palabras con “_”.\n\nPara hacerse la vida más fácil existen “guías de estilo” para programar que explicitan reglas específicas para escribir código. Por ejemplo esta o esta otra. Se trata de reglas únicamente para los ojos humanos, y que no afectan en absoluto la eficiencia o correctitud de la programación. En general, no existen guías buenas o malas, la idea es elegir una y ser consistente. De esta manera, vas a poder entender tu código con más facilidad.\n\n\n1.1.3 Extendiendo R\nR es un lenguaje creado por personas que practican la estadística y pensado para la estadística, por lo que ya viene con un montón de métodos estadísticos incorporados, como mean() o median(). Pero hay tantos métodos estadísticos como gente haciendo estadística así que es imposible que estén todos. La solución es que podés “agregarle” a R funciones que no vienen instaladas por defecto pero que escribieron otras personas en forma de “paquetes”. ¡Este es el poder de la comunidad de R!\nPara instalar paquetes de R, la forma mas fácil es con la función install.packages(). Esta función se conecta a internet y descarga paquetes publicados en un repositorio oficial Entonces, por ejemplo,\n\ninstall.packages(\"readr\")\n\ndescarga e instala un paquete que contiene funciones para leer datos.\n\nPara instalar paquetes de esta forma es necesario tener conexión de internet.\n\nLuego, usando el comando\n\nlibrary(readr)\n\nle decís a R que cargue las funciones que vienen en el paquete readr para usarlas.\n\n\nInstalá el paquete readr con el comando install.packages(\"readr\") en la consola.\nCargá la librería para usarla con library(readr).\n\n\n\nSi cerrás y volveś a abrir R, vas a tener que usar library(readr) nuevamente para acceder a la funcionalidad del paquete readr. Sólo hace falta correr install.packages(\"readr\") una vez por computadora.\n\n\n1.1.4 Buscando ayuda\nEntre la enorme cantidad de funciones que tiene R por defecto y las que se pueden agregar instalando paquetes externos, es imposible recordar todas las funciones y cómo usarlas. Por eso, una gran proporción del tiempo que uses R vas a pasarlo leyendo documentación de funciones, ya sea para aprender a usarlas o porque no te acordás algún detalle.\nPara acceder a la ayuda de una función usamos el signo de pregunta:\n\n?sin\n\nstarting httpd help server ... done\n\n\n\nOtra forma de acceder a la ayuda de una función es poniendo el cursor sobre ella y apretando F1\n\nEsto va a abrir el documento de ayuda para la función sin() que, como verás, tiene la documentación de las funciones trigonométricas que trae R por defecto. Todas las ayudas de R vienen divididas en secciones:\n\nDescription\n\nUna descripción breve de la función o funciones que se documentan.\n\nUsage\n\nNombre de los argumentos de la función. La mayoría de las funciones trigonométricas tienen un solo argumento, que se llama x. La función atan2() tiene dos argumentos, llamados x e y.\n\nArguments\n\nUna descripción de cada argumento. En este caso x e y son vectores numéricos o complejos. Aunque todavía no sepas qué es un “vector”, de esta descripción ya podés intuir que las funciones trigonométricas aceptan números complejos.\n\nDetails\n\nUna descripción detallada de las funciones. Por ejemplo, detalla qué es lo que devuelve la función atan2(), describe las unidades en las que tienen que estar x e y, etc..\n\nValue\n\nDescribe qué tipo de valor devuelve la función.\n\nExamples\n\n(abajo de todo) Es la sección más importante y probablemente la que vas a buscar primero cuando te encuentres con una función nueva que no sabés cómo usar. Acá vas a encontrar código de R de que ejemplifica el uso típico de la función. Podes copiar y pegar el código en la consola y ver el resultado para entender como funciona.\n\n(Otras secciones)\n\nPueden haber otras secciones que detallen distintas particularidades de la función, o referencias a los métodos implementados.\n\n\n\nAbrí y leé la ayuda de la función sd(). Puede que haya cosas que aún no entiendas, pero intentá captar la idea general. Si encesitas traducir la documentación, te recomendamos deepl.\n\n¿Qué hace esa función?\n¿Qué argumentos acepta?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Presentación</span>"
    ]
  },
  {
    "objectID": "01_proyectos.html",
    "href": "01_proyectos.html",
    "title": "\n2  Entorno de trabajo\n",
    "section": "",
    "text": "2.1 Objetivos de aprendizaje",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Entorno de trabajo</span>"
    ]
  },
  {
    "objectID": "01_proyectos.html#objetivos-de-aprendizaje",
    "href": "01_proyectos.html#objetivos-de-aprendizaje",
    "title": "\n2  Entorno de trabajo\n",
    "section": "",
    "text": "interactuar con la interfaz de RStudio para navegar archivos y directorios\ninterpretar las rutas como ubicaciones dentro de las carpetas\ncrear proyectos RStudio e identificar el directorio de trabajo\nreconocer los paneles de la interfaz de RStudio y sus ubicaciones por defecto",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Entorno de trabajo</span>"
    ]
  },
  {
    "objectID": "01_proyectos.html#el-problema",
    "href": "01_proyectos.html#el-problema",
    "title": "\n2  Entorno de trabajo\n",
    "section": "\n2.2 El problema",
    "text": "2.2 El problema\nImagina que arrancas el cuatrimestre y tenes que continuar con un proyecto de análisis de datos. O mejor te tomaste unas largas vacaciones. Por supuesto, todo el código y los datos están en una única carpeta y además lo publicaste en un repositorio público. Es hora de volver a trabajar, pero ¿qué fue lo último que hiciste? ¿qué falta?.\nEmpezas a revisar la carpeta del proyecto y encuentras algo así.\n/home/dorothy/Documentos/proyecto\n├── resumen.R\n├── correlation.png\n├── datos.csv\n├── datos2.csv\n├── fig1.png\n├── figura2(copy).png\n├── figura.png\n├── figura1.png\n├── figura10.png\n├── datos_crudos.csv\n├── script.R\n└── script_final.R\nY no tienes ni idea por donde arrancar. Hay tres .R archivos que podrían ser el script con el código que escribiste, varios posibles archivos que contienen algunos “datos” no especificados y un montón de archivos de imagenes con nombres que dan poca información sobre su contenido. Sin un archivo README (documento descriptivo) ni ninguna otra documentación que te ayude a resolver este lío, es muy posible que cueste mucho tiempo volver al punto en el que estabas y continuar con tu trabajo.\nPara evitar esta situación necesitamos tener en cuenta la reproducibilidad y el desarrollo de software desde el inicio. La reproducibilidad tiene que ver tanto con los humanos que interactúan con el código como con las máquinas que deben ejecutarlo. Hacer hacer que tu código y análisis sea reproducible es permitir que otras personas (y vos en el futuro) puedan revisar, usar y ampliar tu trabajo. Esto requerira aplicar distintos principios de programación y desarrollo de software que veremos a lo largo del curso. Empecemos organizando el trabajo.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Entorno de trabajo</span>"
    ]
  },
  {
    "objectID": "01_proyectos.html#crear-un-proyecto-organizado",
    "href": "01_proyectos.html#crear-un-proyecto-organizado",
    "title": "\n2  Entorno de trabajo\n",
    "section": "\n2.3 Crear un proyecto organizado",
    "text": "2.3 Crear un proyecto organizado\nLo que cuenta como “organizado” es muy personal, pero lo principal es que la estructura de carpetas y los nombres de los archivos deben:\n\nser autodocumentados\nser útiles a la hora de escribir código\nestar en el mismo lugar, es decir, todos los archivos necesarios están dentro de la carpeta raíz\n\n\n2.3.1 Archivos que se autodocumentan\nAprovechá carpetas con nombres informativos para autodocumentar las distintas partes de tu análisis.\nColoca tus datos en datos, los scripts de preprocesamiento en scripts o preprocesamiento y tu análisis en analisis. Utiliza también subcarpetas, como datos/crudos para guardar los datos originales y datos/derivados para los datos preprocesados y depurados.\nNombrá tus archivos de modo que puedas saber que incliyen aún si pasaron 10 años desde que los creaste.\nUtiliza nombres cortos, descripciones breves de lo que hay dentro.\n\nDescribi cuál crees que es el contenido de estos archivos:\n\ndatos/crudos/madrid_temperatura-minima.csv\nscripts/02_calcula_temperatura-media.R\nanalysis/01_madrid_temperatura-minima_analisis-estadistico.Rmd\n\n\n\nPensá en buenos nombres de archivos y carpetas para:\n\nun conjunto de datos sobre gatos con columnas para el peso, la longitud, la longitud de la cola, el color o colores del pelaje, el tipo de pelaje y el nombre.\nun script que descarga datos de Spotify.\nun script que limpia los datos de Spotify.\nun script que ajusta un modelo lineal y lo guarda en un archivo.\nel archivo .Rds en el que se guarda ese modelo.\n\n\n\nUtiliza una estructura de carpetas conocida\nNo existe una única estructura de carpetas objetivamente mejor. En caso de duda, intenta seguir las convenciones de tu comunidad de investigación. Esto minimizará cualquier fricción entre tú y tu público potencial.\n\n\n2.3.2 Archivos con los que puedes programar\nRecuerda siempre que las computadoras son bastante tontas, así que sé amable y utiliza nombres de archivo que puedan entender fácilmente.\nEn algunos casos, los nombres de archivo con espacios confunden a las computadoras, por lo que en general es mucho más fácil trabajar si los nombres de archivo utilizan guiones bajos y guiones para dividir las palabras. Del mismo modo, algunas máquinas no pueden manejar “caracteres especiales” como la “ñ” o las tildes. También es mejor evitar algunos símbolos (“.”, “*”, y otros) porque tienen un significado especial en las expresiones regulares.\nAlgunos sistemas de archivos no distinguen entre mayúsculas y minúsculas, por lo que Temperatura-Madrid.csv y temperatura-madrid.csv pueden ser el mismo archivo.\nPara evitar dolores de cabeza, es mejor y por el lado conservador y solo utilizar caracteres latinos en minúsculas, números y guiones (“_” y “-”).\nUtiliza guiones como separadores. Puedes utilizar “-” para separar palabras que formen parte del mismo concepto y “_” para separar conceptos. Por ejemplo temperatura-minima_buenos-aires.csv, en este caso temperatura-minima es un cocepto y buenos-aires otro. Recomendamos esta convención y no al revés, porque es compatible con el formato de fecha ISO (“AAAA-MM-DD”).\n\nSi utilizás los separadores de forma coherente e inteligente, podrás analizar los nombres de los archivos como parte de tu código. Por ejemplo, si tienes\n\narchivos\n\n[1] \"madrid_temperatura-minima\"       \"buenos-aires_temperatura-minima\"\n[3] \"madrid_temperatura-maxima\"       \"buenos-aires_temperatura-maxima\"\n\n\nTambién podrías extraer ciudades y nombres de variables desde los nombres de los archivos\n\nstrsplit(archivos, \"_\")\n\n[[1]]\n[1] \"madrid\"             \"temperatura-minima\"\n\n[[2]]\n[1] \"buenos-aires\"       \"temperatura-minima\"\n\n[[3]]\n[1] \"madrid\"             \"temperatura-maxima\"\n\n[[4]]\n[1] \"buenos-aires\"       \"temperatura-maxima\"\n\n\n\nPor último, intentá que tus archivos sean fácilmente ordenables. Comezá el nombre del archivo con números (que incluya suficientes ceros a la izquierda) y, si aplicar, utilizá fechas en formato AAAA-MM-DD para que el orden de los archivos por nombre coincida con el orden por fecha.\n\n2.3.3 Que tu proyecto sea autocontenido\nUn aspecto importante a la hora de pensar en tu proyecto es que todos los scripts, datos, figuras y cualquier otra cosa que se necesite para (re)crear el análisis esté dentro de la misma carpeta raíz. De ese modo te aseguras de que lo único que tienes que dar a otra persona para que ejecute correctamente tu código es esa única carpeta. También te facilita la vida si trabajas en el mismo proyecto en distintas computadoras, ya que te permite sincronizar una única carpeta.\n\nMás adelante veremos como empaquetar código para compartirlo con otras personas.\n\nUn paso extra a tener en cuenta es que no puedes hacer que tu trabajo sea portable si tu código no lo es también. Quizás el principal culpable de que el código no sea portable sea utilizar rutas absolutas para manipular archivos en tu código.\nLa siguiente línea de código lee el archivo datos.csv:\n\nread.csv(\"/home/dorothy/Documentos/proyectos/mitrabajo/datos/datos.csv\")\n\nAunque hayas descargado correctamente la carpeta mitrabajo desde algún repositorio, este código va a dar error porque es poco probable que hayas guardado esa carpeta dentro de Documentos/proyectos y que tu nombre de usuario en la computadora sea “dorothy”.\nEn cambio, podes utilizar una ruta relativa:\n\nread.csv(\"datos/datos.csv\")\n\nEsto se ejecutará independientemente de dónde se encuentre la carpeta raíz de tu proyecto ya que hace referencia solo a lo que está adentro. Como veremos a continuación los proyectos de RStudio ayudan a definir cual es la carpeta raíz de manera automática.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Entorno de trabajo</span>"
    ]
  },
  {
    "objectID": "01_proyectos.html#proyectos-de-rstudio",
    "href": "01_proyectos.html#proyectos-de-rstudio",
    "title": "\n2  Entorno de trabajo\n",
    "section": "\n2.4 Proyectos de RStudio",
    "text": "2.4 Proyectos de RStudio\nRStudio proporciona una forma ordenada y estructurada de separar tus proyectos en diferentes contextos. No ayudan estrictamente a la reproducibilidad del producto final, pero te ayudarán a agilizar tu flujo de trabajo encapsulando cosas como la lista de archivos abiertos, el historial de comandos de R y la configuración de RStudio para cada proyecto.\nAbrir un proyecto de RStudio también garantiza que inicies una nueva sesión de R cada vez y establece tu directorio de trabajo en la carpeta raíz del proyecto.\n\nCreá un nuevo proyecto de RStudio\n\nHace clic en “File” y luego en “New Project…”.\nHace clic en “New directory”.\nVerás una lista de varias plantillas. Selecciona “New project”.\nEscribí el nombre de la carpeta raíz en la que vivirá tu proyecto y selecciona la ubicaciónn en la que quieres que se cree esta carpeta haciendo clic en “Browse”.\nHace clic en “Create project”.\n\n\n¿Cuál es la ruta absoluta a la carpeta de tu proyecto?\nSi cerrás RStudio, ¿cómo podés asegurarte de que tu carpeta de trabajo es la carpeta de tu proyecto la próxima vez que abras RStudio?\n\n\nSi todo salió bien, deberías tener una nueva carpeta con el nombre que elejiste para tu proyecto. Es una carpeta común y corriente; lo que la distingue como proyecto de RStudio es el archivo .Rproj, que contiene las opciones de RStudio específicas del proyecto, y la carpeta oculta .Rproj.user, donde se encuentran los archivos temporales específicos del proyecto.\nCada proyecto de RStudio tiene su propio conjunto de opciones que podés cambiar sin alterar las opciones globales ni las de otros proyectos.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Entorno de trabajo</span>"
    ]
  },
  {
    "objectID": "01_proyectos.html#abrir-un-proyecto",
    "href": "01_proyectos.html#abrir-un-proyecto",
    "title": "\n2  Entorno de trabajo\n",
    "section": "\n2.5 Abrir un proyecto",
    "text": "2.5 Abrir un proyecto\nLa forma más sencilla de abrir un proyecto es abrir la carpeta que lo contiene y hacer doble clic en el archivo .Rproj. También puedes abrir rápidamente un proyecto utilizado recientemente haciendo clic en el icono de proyecto situado a la derecha de la barra de herramientas de RStudio.\nEsto abrirá una nueva ventana de RStudio con su propia sesión de R y la carpeta del proyecto será el directorio o carpeta raiz. Por defecto, también abrirá los archivos abiertos anteriormente. Incluso conservará los cambios no guardados. Esto ayuda a mantener tu trabajo ordenado y facilita retomar o compartir lo que has hecho más tarde.\nRStudio te permite tener abiertos varios proyectos, y esto es posible porque cada proyecto tiene su propia carpeta. Puedes trabajar con varios proyectos en paralelo sin que el código o los resultados de un análisis interfieran con los de otro.\n\nAbrí tu proyecto\n\nEn tu nuevo proyecto, crea un nuevo archivo .R y escribe algo de código (por ejemplo print(\"Hola!\") o `x &lt;- 2 + 2), no te olvides de guardarlo.\nCerrá la ventana de RStudio.\nAhora abrí una nueva ventana de RStudio y el proyecto de RStudio que acabas de cerrar (dependiendo de tus opciones globales, puede que se abra por defecto).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Entorno de trabajo</span>"
    ]
  },
  {
    "objectID": "01_proyectos.html#borrón-y-cuenta-nueva-todos-los-días",
    "href": "01_proyectos.html#borrón-y-cuenta-nueva-todos-los-días",
    "title": "\n2  Entorno de trabajo\n",
    "section": "\n2.6 Borrón y cuenta nueva… todos los días",
    "text": "2.6 Borrón y cuenta nueva… todos los días\n¿Cómo garantizamos que el análisis sea realmente reproducible? Es una pregunta bastante amplia y existen muchas herramientas para resolver este problema. Por ahora vamos a concentrarnos en que, al menos en tu computadora, puedas repetir los cálculos o el análisis desde cero. Y además de organizar los proyectos y no modificar los datos originales, ¿cómo podés asegurarte deguardar todo el código que estuviste usando y genera el análisis? La forma más directa es reiniciar la sesión de R y volver a ejecutar el código, si da un error o no devuelve lo que esperabas significa que te has saltado un paso.\n\nPuedes reiniciar la sesión de R con el atajo de teclado Ctrl+Shif+F10.\n\nEsto puede ocurrir si, por ejemplo, lees datos en memoria ejecutando un comando en la consola. Mientras trabajamos, R tendrá esos datos en memoria y podrás hacer cálculos y gráficos, pero tu código no será reproducible porque le falta el paso importante de leer los datos.\nLa mejor forma de asegurarte de que esto no ocurra es volver a ejecutar tu código en una sesión nueva de R a menudo, para asegurarte de que tu código es reproducible en cada paso del análisis. Sin embargo, por defecto RStudio guardará el entorno en un archivo oculto llamado .RData y lo restaurará al iniciarse, de modo que los datos seguirán estando en la memoria. Y aunque esto resulta útil para que puedas arrancar tu trabajo exactamente donde lo dejaste cada vez que abras tu proyecto, puede llevar a una situación en la que nunca te des cuenta de que se te pasó guardar una línea de código clave en tu análisis.\n\nConfigurá tu proyecto\n\nVe a “Tools” -&gt; “Project options…”.\nEn la pestaña “General”\n\n\nDestildar la opción “Restore .RData into the workspace at startup”\n“Save workspace to .RData on exit”: Selecciona “Never” en el menú desplegable\n\n\n\nPuedes cambiar estas preferencias a nivel global con “Tools” -&gt; “Global Options” en la sección “General”\n\n\n2.6.1 Recursos\nEstructura del proyecto - Diapositivas de Danielle Navarro/\nEmpaquetar el trabajo analítico de datos de forma reproducible utilizando R (y amigos)\nCómo (y por qué) hacer un compendio de investigación",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Entorno de trabajo</span>"
    ]
  },
  {
    "objectID": "06_funciones.html",
    "href": "06_funciones.html",
    "title": "\n7  Funciones\n",
    "section": "",
    "text": "7.1 Trabajando con funciones y otro código\nHasta ahora tenemos un proyecto con una determinada estructura de carpetas que nos permite ordenar nuestro trabajo. Además vimos en detalle como utilizar archivos .Rmd o .qmd autocontenidos, que incluyan el código y texto necesario para generar un análisis. Pero es posible que nuestro trabajo necesite funciones que generamos para hacer nuestro trabajo más simple. Si incluimos el código que define estas funciones en nuestro .Rmd, puede complejizar nuestro código y que sea más dificil de interpretar. Aquí podemos comenzar a incluir archivos secundarios que contengan estas funciones.\nEn las situaciones donde nuestro código no produce resultados, más bien son definiciones de funciones secundarias u otras herramientras, no tiene tanto sentido usar archivos .Rmd. En estos casos podemos volver a los tradicionales scripts.\nSi hipotéticamente quisieramos definir una función que convierte la temperatura en kelvin (algo muy común entre meteorólogos) a la temperatura en grados centígrados tendriamos el siguiente código:\nkelvin_a_centigrados &lt;- function(temperatura) {\n  \n  return(temperatura - 273.15)\n  \n}\nque podríamos guardar en un script de R que se llame funciones_secundarias.R que por supuesto guardaremos en la carpeta “scripts”. Aquí podemos hacer un paréntesis para mencionar la necesidad de documentar apropiadamente cualquier función o código que generemos. Para una función deberíamos incluir:\nAhora el desafío es lograr usar esa función que está en un archivo .R en el reporte .Rmd. Necesitamos cargar el script al comienzo de nuestro archivo para que la función quede disponible para ser utilizada más adelante.\nEl mejor lugar para hacer esto es, en el caso de R Markdown, el bloque de código setup donde además cargamos las librerías que usaremos. Por ejemplo:",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Funciones</span>"
    ]
  },
  {
    "objectID": "06_funciones.html#trabajando-con-funciones-y-otro-código",
    "href": "06_funciones.html#trabajando-con-funciones-y-otro-código",
    "title": "\n7  Funciones\n",
    "section": "",
    "text": "Qué hace o cual es su propósito.\nQué argumentos requiere y de que tipo de datos son.\nQué genera cómo resultado.\n\n\nCrea una función\n\nCreá un archivo .R con alguna función. Puede ser la que vimos como ejemplo o alguna otra que prefieras.\nGuardá el archivo en la carpeta scripts\n\n\n\n\nlibrary(ggplo2)\nlibrary(data.table)\nsource(here::here(\"scripts/funciones_secundarias.R\"))\n\nCarga la función\n\nAgrega source(here::here(\"scripts/funciones_secundarias.R\")) al comienzo del archivo .Rmd\nUsa la función en algún bloque de código\nKnitea el archivo para ver el resultado final",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Funciones</span>"
    ]
  },
  {
    "objectID": "06_funciones.html#trabajando-con-datos",
    "href": "06_funciones.html#trabajando-con-datos",
    "title": "\n7  Funciones\n",
    "section": "\n7.2 Trabajando con datos",
    "text": "7.2 Trabajando con datos\nMuchas veces los datos están disponibles en distintos servicios en páginas de internet. Muchos gobiernos por ejemplo, tienen portales de datos abiertos. Organizaciones generan APIs para poner a disposición sus datos o tal vez otras personas publicaron sus datos en servicios como Zenodo y queremos aprovecharlos. Es posible que se puedan decargar los datos visitando la web y haciendo click en un botón, sin embargo podríamos escribir el código necesario para hacer esto de manera programática. Esto hace que nuestro trabajo sea más reproducible y disminuye las chances de error.\nEl código que genera la descarga de datos podría estar incluido en el archivo .Rmd si la descarga no demora. En general querremos incluir la opción de no descargar los datos si el código encuentra que ya fueron descargados previamente. También podríamos generar un script de descarga de datos que corra una sola vez. Esta es una buena idea cuando el código de descarga demora o es complejo.\nVeamos un ejemplo de descarga de datos desde Zenodo.\nSi revisamos la base de datos https://sandbox.zenodo.org/record/1029654 veremos que incluye un solo archivo en formato .csv.\n\n\n\n\n\n\n\n\nVemos también el botón “Download” para la descarga del archivo. Podríamos usarlo para descargar el archivo haciendo click.\nPero como mencionaba previamente, se puede escribir el código necesario para hacer la descarga de manera programática y asegurarnos que tenemos los datos correctos. Podríamos crear una función descarga_pinguinos():\ndescarga_pinguinos &lt;- function() {\n  file &lt;- here::here(\"datos/datos_crudos/penguins.csv\")\n  url &lt;- \"https://sandbox.zenodo.org/record/1029654/files/penguins.csv?download=1\"\n  download.file(url, file)\n}\nPara obtener la dirección url del archivo, hay que hacer click derecho sobre el botón Download y copiar el link.\nAhora si deseas descargar los datos solo hay que llamar a la función descarga_pinguinos() y los datos se guardaran en la carpeta correcta.\nPodríamos mejorar esto generando una función que solo descargue los datos en caso de que no estén presentes en el proyecto. Esta función podría escribirse de esta manera:\ndatos_pinguinos &lt;- function() {\n  file &lt;- here::here(\"datos/datos_crudos/penguins.csv\")\n  if (!file.exists(file)) {\n    descarga_pinguinos()\n  } \n  return(read.csv(file))\n}\nCon esta última función en nuestro archivo .Rmd nos podemos olvidar de la descarga de datos, que se hará automáticamente.\npenguins &lt;- datos_pinguinos()\n\nDescarga de datos programática\n\nSiguiendo los pasos anteriores, general las funciones necesarias para descargar los datos prográtiacamente en la carpeta correcta.\nLas funciones pueden estar al comienzo del archivo o puedes guardarlas en el script funciones_secundarias.R (o un nuevo script) y cargarlas al comienzo.\nPara revisar que todo funciona, knitea el archivo y chequea que los datos estén en la carpeta correcta.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Funciones</span>"
    ]
  }
]